{"version":3,"file":"static/js/385.262637b2.chunk.js","mappings":"uQAAA,IAAMA,EAAU,mCAET,SAASC,IACZ,OAAQC,MAAM,yDAAD,OAA0DF,IAClEG,MAAK,SAAAC,GACF,OAAKA,EAAIC,GAGFD,EAAIE,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAASC,EAAeC,GAC3B,OAAQT,MAAM,sCAAD,OAAuCS,EAAvC,oBAAqDX,EAArD,oBACRG,MAAK,SAAAC,GACF,OAAKA,EAAIC,GAGFD,EAAIE,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAASG,EAAeD,GAC3B,OAAQT,MAAM,sCAAD,OAAuCS,EAAvC,4BAA6DX,EAA7D,oBACRG,MAAK,SAAAC,GACF,OAAKA,EAAIC,GAGFD,EAAIE,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAASI,EAAkBF,GAC9B,OAAQT,MAAM,sCAAD,OAAuCS,EAAvC,4BAA6DX,EAA7D,2BACRG,MAAK,SAAAC,GACF,OAAKA,EAAIC,GAGFD,EAAIE,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAASK,EAAiBC,GAC7B,OAAQb,MAAM,qDAAD,OAAsDF,EAAtD,iCAAsFe,EAAtF,gCACRZ,MAAK,SAAAC,GACF,OAAKA,EAAIC,GAGFD,EAAIE,OAFAC,QAAQC,OAAO,IAAIC,MAAM,sG,2HC9CjC,SAASO,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SAEpC,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAcA,OAPAC,EAAAA,EAAAA,YAAU,WACDP,IACLR,EAAAA,EAAAA,IAAiBQ,GAAYnB,MAAK,SAAAC,GAC9BwB,EAAexB,EAAI0B,YACpBC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,QACzB,CAACV,KAGA,4BACI,kBAAMY,SAdO,SAAAC,GACjBA,EAAMC,iBACNf,EAAgB,CAAEgB,MAAOZ,KAYrB,WACI,kBACIa,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,GACZC,SAAU,SAAAC,GAAIjB,EAAeiB,EAAEC,OAAOC,MAAMC,gBAC5CD,MAAOpB,KAEX,2BACI,mBAAQa,KAAK,SAAb,0BAKR,wBACMX,GAAeA,EAAYoB,QAAWpB,EAAYqB,KAAI,SAAAC,GAAK,aACzD,yBACI,SAAC,KAAD,CACIC,GAAE,kBAAaD,EAAMtC,IACrBwC,MAAO,CAACC,KAAMnC,GAFlB,mBAGKgC,EAAMI,aAHX,QAGoBJ,EAAMlC,QAJrBkC,EAAMtC","sources":["service/fetchMovies.js","views/Movie/MoviesView.js"],"sourcesContent":["const API_KEY = \"eee74d93b5141c6c12502e44923a7011\";\n\nexport function fetchTrending() {\n    return (fetch(`https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieById(id) {\n    return (fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieCast(id) {\n    return (fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieReviews(id) {\n    return (fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieByName(name) {\n    return (fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${name}&page=1&include_adult=false`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })  \n    )\n}\n\n// export function fetchPicture(picture, page) {\n//     return (\n\n//         fetch(`https://pixabay.com/api/?q=${picture}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`)\n//             .then(response => {\n//                 if (response.ok) { return response.json() }\n//                 return Promise.reject(new Error(\"Ничего не найдено\"))\n//             })\n//     )\n// }\n\n// useEffect(() => {\n//     if (searchValue === \"\") { return };\n\n//     setIsLoading(true);\n//     fetchPicture(searchValue, page)\n//         .then(response => {\n//             setTotalPages(response.total);\n//             setSearchPicture(prevState => [...prevState, ...response.hits]);\n//         })\n//         .catch(err => {\n//             setError(err)\n//             alert(error)\n//         })\n//         .finally(() => setIsLoading(false))\n// }, [searchValue, page, error])","import { useState, useEffect } from \"react\";\nimport { useSearchParams, Link, useLocation } from \"react-router-dom\";\nimport { fetchMovieByName } from \"service/fetchMovies\";\n\nexport default function MoviesView() {\n    const location = useLocation();\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const movieQuery = searchParams.get(\"query\");\n\n    const [searchValue, setSearchValue] = useState('');\n    const [searchMovie, setSearchMovie] = useState({});\n    \n    const handleSubmit = event => {\n        event.preventDefault();\n        setSearchParams({ query: searchValue }); \n    }\n\n    useEffect(() => {\n        if (!movieQuery) { return }\n        fetchMovieByName(movieQuery).then(res => {\n            setSearchMovie(res.results)\n        }).catch(error => alert(error));\n    }, [movieQuery])\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"\"\n                    onChange={e=>{setSearchValue(e.target.value.toLowerCase())}}\n                    value={searchValue}\n                />\n                <span>\n                    <button type=\"submit\">\n                        Search  \n                    </button>\n                </span>\n            </form>\n            <ul>\n                {(searchMovie && searchMovie.length) && searchMovie.map(movie => (\n                    <li key={movie.id}>\n                        <Link\n                            to={`/movies/${movie.id}`}\n                            state={{from: location }}>\n                            {movie.title ?? movie.name}\n                        </Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}"],"names":["API_KEY","fetchTrending","fetch","then","res","ok","json","Promise","reject","Error","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","fetchMovieByName","name","MoviesView","location","useLocation","useSearchParams","searchParams","setSearchParams","movieQuery","get","useState","searchValue","setSearchValue","searchMovie","setSearchMovie","useEffect","results","catch","error","alert","onSubmit","event","preventDefault","query","type","autoComplete","autoFocus","placeholder","onChange","e","target","value","toLowerCase","length","map","movie","to","state","from","title"],"sourceRoot":""}