{"version":3,"file":"static/js/968.d35975ce.chunk.js","mappings":"6OAIe,SAASA,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACbC,GAAWC,EAAAA,EAAAA,MAITC,GADSC,EAAAA,EAAAA,MACQD,QAEvB,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAeR,GAASS,MAAK,SAAAC,GACzBN,EAAgBM,MACjBC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,QACzB,CAACZ,KAEJO,EAAAA,EAAAA,YAAU,WACND,EAAUH,EAAaE,UACxB,CAACF,IAOJ,OACI,4BACI,mBAAQW,KAAK,SAASC,QAPf,WACX,GAAuB,OAAnBnB,EAASoB,MAAiB,OAAOlB,EAAS,IAAK,CAAEmB,SAAS,IAC9DnB,EAASF,EAASoB,MAAME,KAAKC,SAAU,CAAEF,SAAS,KAK9C,sBACA,wBAAKd,EAAaiB,SAClB,gBACIC,IAAG,yCAAoClB,EAAamB,eACpDC,IAAKpB,EAAaiB,SAEtB,uBAAIjB,EAAaqB,cAAb,wBAA8CrB,EAAaqB,iBAC/D,sCACA,0BAAOrB,EAAasB,YACpB,oCACA,wBACMpB,GAAUA,EAAOqB,QAAWrB,EAAOsB,KAAI,SAAAC,GAAK,OAC1C,wBAAoBA,EAAMC,MAAjBD,EAAME,UAGvB,mBACA,2BACI,yBAAI,SAAC,KAAD,CAAMC,GAAG,OAAT,qBACJ,yBAAI,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAER,SAAC,KAAD,S,qJCpDZ,IAAMC,EAAU,mCAET,SAASC,IACZ,OAAQC,MAAM,yDAAD,OAA0DF,IAClEvB,MAAK,SAAAC,GACF,OAAKA,EAAIyB,GAGFzB,EAAI0B,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAAS/B,EAAesB,GAC3B,OAAQI,MAAM,sCAAD,OAAuCJ,EAAvC,oBAAqDE,EAArD,oBACRvB,MAAK,SAAAC,GACF,OAAKA,EAAIyB,GAGFzB,EAAI0B,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAASC,EAAeV,GAC3B,OAAQI,MAAM,sCAAD,OAAuCJ,EAAvC,4BAA6DE,EAA7D,oBACRvB,MAAK,SAAAC,GACF,OAAKA,EAAIyB,GAGFzB,EAAI0B,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAASE,EAAkBX,GAC9B,OAAQI,MAAM,sCAAD,OAAuCJ,EAAvC,4BAA6DE,EAA7D,2BACRvB,MAAK,SAAAC,GACF,OAAKA,EAAIyB,GAGFzB,EAAI0B,OAFAC,QAAQC,OAAO,IAAIC,MAAM,oGAOzC,SAASG,EAAiBb,GAC7B,OAAQK,MAAM,qDAAD,OAAsDF,EAAtD,iCAAsFH,EAAtF,gCACRpB,MAAK,SAAAC,GACF,OAAKA,EAAIyB,GAGFzB,EAAI0B,OAFAC,QAAQC,OAAO,IAAIC,MAAM","sources":["components/MovieDetails/MovieDetails.js","service/fetchMovies.js"],"sourcesContent":["import { useParams, Link, Outlet, useLocation, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchMovieById } from \"service/fetchMovies\";\n\nexport default function MovieDetails() {\n    const location = useLocation();\n    let navigate = useNavigate() ;\n    \n\n    const params = useParams();\n    const movieId = params.movieId;\n\n    const [movieDetails, setMovieDetails] = useState({});\n    const [genres, setGenres] = useState({});\n    \n    useEffect(() => {\n        fetchMovieById(movieId).then(res => {\n            setMovieDetails(res);\n        }).catch(error => alert(error));\n    }, [movieId]);\n\n    useEffect(() => {\n        setGenres(movieDetails.genres)\n    }, [movieDetails]);\n\n    const goBack = () => {\n        if (location.state === null){ return navigate('/', { replace: true }) }\n        navigate(location.state.from.pathname, { replace: true });\n    }\n    \n    return (\n        <div>\n            <button type='button' onClick={goBack}>Go back</button>\n            <h2>{movieDetails.title}</h2>\n            <img \n                src={`https://image.tmdb.org/t/p/w500${movieDetails.backdrop_path}`}\n                alt={movieDetails.title}>\n            </img>\n            <p>{movieDetails.release_date && `Release date: ${movieDetails.release_date}`}</p>\n            <h3>Overview</h3>\n            <span>{movieDetails.overview}</span>\n            <h3>Genres</h3>\n            <ul>\n                {(genres && genres.length) && genres.map(genre => (\n                    <li key={genre.id}>{genre.name}</li>\n                ))}\n            </ul>\n            <hr />\n            <ul>\n                <li><Link to=\"cast\">Cast</Link></li>\n                <li><Link to=\"reviews\">Reviews</Link></li>\n            </ul>\n            <Outlet />\n        </div>\n        \n    )\n}","const API_KEY = \"eee74d93b5141c6c12502e44923a7011\";\n\nexport function fetchTrending() {\n    return (fetch(`https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieById(id) {\n    return (fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieCast(id) {\n    return (fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieReviews(id) {\n    return (fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })\n    )\n}\n\nexport function fetchMovieByName(name) {\n    return (fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${name}&page=1&include_adult=false`)\n        .then(res => {\n            if (!res.ok) {\n                return Promise.reject(new Error(\"Ничего не найдено\"))\n            }\n            return res.json();\n        })  \n    )\n}\n\n// export function fetchPicture(picture, page) {\n//     return (\n\n//         fetch(`https://pixabay.com/api/?q=${picture}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`)\n//             .then(response => {\n//                 if (response.ok) { return response.json() }\n//                 return Promise.reject(new Error(\"Ничего не найдено\"))\n//             })\n//     )\n// }\n\n// useEffect(() => {\n//     if (searchValue === \"\") { return };\n\n//     setIsLoading(true);\n//     fetchPicture(searchValue, page)\n//         .then(response => {\n//             setTotalPages(response.total);\n//             setSearchPicture(prevState => [...prevState, ...response.hits]);\n//         })\n//         .catch(err => {\n//             setError(err)\n//             alert(error)\n//         })\n//         .finally(() => setIsLoading(false))\n// }, [searchValue, page, error])"],"names":["MovieDetails","location","useLocation","navigate","useNavigate","movieId","useParams","useState","movieDetails","setMovieDetails","genres","setGenres","useEffect","fetchMovieById","then","res","catch","error","alert","type","onClick","state","replace","from","pathname","title","src","backdrop_path","alt","release_date","overview","length","map","genre","name","id","to","API_KEY","fetchTrending","fetch","ok","json","Promise","reject","Error","fetchMovieCast","fetchMovieReviews","fetchMovieByName"],"sourceRoot":""}